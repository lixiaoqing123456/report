主要的挑战，数据管理
工作流的性能和效率现在取决于在执行期间有效地利用存储资源来管理数据。

总结
用户可以使用编程接口把workflow和数据对象映射到VDS
用户可以使用编程抽象在数据空间中组成工作流，并指定数据属性，这些数据属性提示VDS进行数据管理。
VDS中的主要实体是一个虚拟数据对象，它表示工作流的每个数据元素，并将它们映射到底层文件系统。
一个数据元素可以是一个文件、一个文件集合或一个包含多个文件和子目录的目录。
MaDaTS使用这些提示和数据管理策略来创建数据任务，这些任务协调数据在内存存储层次结构中的移动。
工作流中的数据任务与存储系统交互，实现数据在存储层之间的移动。

以数据为中心的工作流模型允许我们通过检查生命周期中的每个数据对象来做出数据管理决策，
而不是只查看单个任务。在工作流的以数据为中心的模型中，数据对象被视为工作流任务的第一类参数。
这导致了数据驱动的工作流执行，只要任务使用的数据可用，就可以执行任务。


应用层
	应用层为用户提供编程VDS的接口，用于管理分级存储系统中的工作流数据。
	storage configuration
		存储配置告诉VDS要使用的存储层。
		每个存储层都由其唯一的文件系统挂载点标识。
		每个存储层的属性包括文件系统(Lustre/HPSS/GPFS)、吞吐量、IOPS和延迟等性能特征，以及持久性特征(volatile和non-volatile存储)。
		这有两个好处。首先，它允许程序员配置特定于工作流的存储层。其次，它将多个系统的存储层统一为单个数据空间。
	programming abstractions
		用户使用编程抽象来创建VDS并向VDS添加虚拟数据对象。
		然后，用户创建工作流任务并将其与虚拟数据对象关联起来。
		这些抽象还用于指定数据属性和数据管理策略，
		基于这些属性和策略可以在VDS中创建新的虚拟数据对象和任务。

数据层
	数据层由虚拟数据对象以及它们实际的存储层和工作流中相应数据集的映射组成。
	虚拟数据对象是VDS中的抽象实体，由对象标识符唯一标识。
	每个任务要么是写入文件系统对象的生产者，要么是从相应的文件系统对象读取数据的消费者。
	因此，虚拟数据对象是文件系统对象及其生产者和消费者的封装。
	虚拟数据对象还具有定义工作流数据的I/O和数据管理特征的属性。这些属性的示例包括大小、持久性和类型。
	用户还可以使用这些属性来指示哪些虚拟数据对象需要在工作流生命周期之后持久化。
	这允许VDS将任何中间数据复制到持久存储，以便用户可以在多个工作流之间共享数据或用于未来的分析。

管理层
	在内部，VDS通过几个操作管理虚拟数据对象的生命周期。
	 (a) add, (b) copy, (c) replace, and (d) delete
	为了将文件系统对象移动到首选存储层，VDS创建了“数据任务”，并将它们与虚拟数据对象关联起来。
	数据任务可以有三种类型:(i)设置，为数据集分段创建必要的目录;(ii)移动，在两个存储层之间移动数据集;(iii)清理，
	复制更新单个操作中所有依赖工作流任务对相应数据对象的访问，而不是更新对工作流中数据对象的每次访问。
	
	但是程序员也可以根据他们的工作流需求定义、注册和使用定制的数据管理策略。
	
	如果映射中间数据集的任何虚拟数据对象被设置为持久存储，
	VDS将创建额外的退出任务，将数据集移动到持久存储。
	最后，如果VDS被编程为自动清理，则会创建额外的数据任务来删除中间数据集。
	除了数据任务之外，虚拟数据对象还与“计算任务”相关联。
	计算任务是指主要处理或分析数据的工作流任务。
	这种计算任务和数据任务之间关注点的分离允许madat为数据管理分配单独的资源和工作流执行。
	
	VDS中的每个任务都由一个命令和一组属性标识。命令是指可执行的任务。任务的属性指定任务的运行时信息。
	任务属性的示例包括可执行命令的参数、任务的预期运行时以及执行任务所需请求的节点数量。进一步使用这些选项madat用于调度和执行HPC资源上的任务。